; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "TMS-Lite Software"
#define NewShortcutName "TMS-Lite Software v.1.10.0"
#define MyAppVersion "1.10.0"
#define MyAppPublisher "TMS-Lite Sdn Bhd"
#define MyAppExeName "TMS-Lite Software.exe"
#define MySourcePath "C:\Users\User\Documents\GitHub\TMS-Lite-Software\dist\TMS-Lite Software v.1.10.0"
#define DependencyPath "C:\Users\User\Documents\GitHub\TMS-Lite-Software\dist\TMS-Lite Software v.1.10.0\DEPENDENCIES"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{1ECC9EC9-CD71-45CB-BD5E-6126F41FA32A}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName}
AppVerName={#MyAppName} v.{#MyAppVersion}
AppPublisher={#MyAppPublisher}
DefaultDirName={autopf}\{#MyAppName}
DefaultGroupName={#MyAppName}
; Uncomment the following line to run in non administrative install mode (install for current user only.)
;PrivilegesRequired=lowest
PrivilegesRequiredOverridesAllowed=dialog
OutputDir=C:\Users\User\Documents\GitHub\TMS-Lite-Software\Inno Setup Installer exe
OutputBaseFilename={#MyAppName} v.{#MyAppVersion} Installer
Compression=lzma
SolidCompression=yes
WizardStyle=modern
UninstallDisplayIcon={#MySourcePath}\TMS Icon\logo4.ico

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "{#DependencyPath}\Install HikVision MVS\MVS_STD_3.2.1_200424.exe"; Flags: dontcopy
; Flag: dontcopy is used to implement ExtractTemporaryFile('MVS_STD_3.2.1_200424.exe') function
Source: "{#DependencyPath}\Install Microsoft Visual C++ 2015-2019 Redistributable\VC_redist.x86.exe"; Flags: dontcopy
Source: "{#DependencyPath}\Install Microsoft Visual C++ 2015-2019 Redistributable\VC_redist.x64.exe"; Flags: dontcopy
Source: "{#MySourcePath}\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#MySourcePath}\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{autodesktop}\{#NewShortcutName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[InstallDelete]
Type: files; Name: "{userdesktop}\TMS-Lite Software v.1.7.23.lnk"
Type: files; Name: "{commondesktop}\TMS-Lite Software v.1.7.23.lnk"

Type: files; Name: "{userdesktop}\TMS-Lite Software v.1.6.22.lnk"
Type: files; Name: "{commondesktop}\TMS-Lite Software v.1.6.22.lnk"

Type: files; Name: "{userdesktop}\TMS-Lite Software v.1.8.0.lnk"
Type: files; Name: "{commondesktop}\TMS-Lite Software v.1.8.0.lnk"

Type: files; Name: "{userdesktop}\TMS-Lite Software v.1.9.0.lnk"
Type: files; Name: "{commondesktop}\TMS-Lite Software v.1.9.0.lnk"

[Code]
function CheckMVS(): Boolean;
begin
Result := True;   
  if RegKeyExists(HKLM,
       'SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\HIK_MVS') then
  begin
    Result := False;
  end
end;

function CheckVC_redist(regkey_str : String): Boolean;
begin
Result := True;   
  if RegKeyExists(HKLM,
       'SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\' + regkey_str) then
  begin
    Result := False;
  end
end;

function PrepareToInstall(var NeedsRestart: Boolean): String;
begin
  ExtractTemporaryFile('MVS_STD_3.2.1_200424.exe')
  ExtractTemporaryFile('VC_redist.x86.exe')
  ExtractTemporaryFile('VC_redist.x64.exe')
end;

procedure CurStepChanged(CurStep: TSetupStep);
var
  ResultCode : Integer;
begin
  if CurStep = ssInstall then
    begin
    if CheckMVS = True then
      begin
      if not ShellExec('', ExpandConstant('{tmp}\MVS_STD_3.2.1_200424.exe'), '', '', SW_SHOWNORMAL,
        ewWaitUntilTerminated, ResultCode) then
        begin
          MsgBox('MVS_STD_3.2.1_200424.exe installer failed to run!' + #13#10 +
            SysErrorMessage(ResultCode) + ' (Err Code: ' + IntToStr(ResultCode) + ')', mbError, MB_OK)
          Abort;
        end
      else
        if CheckMVS = True then
          begin
            MsgBox('MVS_STD_3.2.1_200424.exe installation was cancelled!' + #13#10, mbError, MB_OK)
            Abort;
          end
      end;

    if CheckVC_redist('{d7a6435f-ac9a-4af6-8fdc-ca130d13fac9}') = True then
      begin 
      if not ShellExec('', ExpandConstant('{tmp}\VC_redist.x86.exe'), '/S', '', SW_SHOWNORMAL,
        ewWaitUntilTerminated, ResultCode) then
        begin
          MsgBox('VC_redist.x86.exe installer failed to run!' + #13#10 +
            SysErrorMessage(ResultCode) + ' (Err Code: ' + IntToStr(ResultCode) + ')', mbError, MB_OK)
          Abort;
        end
      else
        if ResultCode = 1602 then
          begin
            MsgBox('VC_redist.x86.exe installation was cancelled!' + #13#10 +
              SysErrorMessage(ResultCode) + ' (Err Code: ' + IntToStr(ResultCode) + ')', mbError, MB_OK)
            Abort;
          end
      end;

    if (CheckVC_redist('{33628a12-6787-4b9f-95a1-92449f69fae0}') = True) and (IsWin64() = True) then
      begin
      if not ShellExec('', ExpandConstant('{tmp}\VC_redist.x64.exe'), '/S', '', SW_SHOWNORMAL,
        ewWaitUntilTerminated, ResultCode) then
        begin
          MsgBox('VC_redist.x64.exe installer failed to run!' + #13#10 +
            SysErrorMessage(ResultCode) + ' (Err Code: ' + IntToStr(ResultCode) + ')', mbError, MB_OK)
          Abort;
        end
      else
        if ResultCode = 1602 then
          begin
            MsgBox('VC_redist.x64.exe installation was cancelled!' + #13#10 +
              SysErrorMessage(ResultCode) + ' (Err Code: ' + IntToStr(ResultCode) + ')', mbError, MB_OK)
            Abort;
          end
      end;
    end;
end;

function GetUninstallString: string;
var
  sUnInstPath: string;
  sUnInstallString: String;
begin
  Result := '';
  sUnInstPath := ExpandConstant('Software\Microsoft\Windows\CurrentVersion\Uninstall\{{1ECC9EC9-CD71-45CB-BD5E-6126F41FA32A}_is1'); { Your App GUID/ID }
  sUnInstallString := '';
  if not RegQueryStringValue(HKLM, sUnInstPath, 'UninstallString', sUnInstallString) then
    RegQueryStringValue(HKCU, sUnInstPath, 'UninstallString', sUnInstallString);
  Result := sUnInstallString;
end;

function IsUpgrade: Boolean;
begin
  Result := (GetUninstallString() <> '');
end;

function InitializeSetup: Boolean;
var
  V: Integer;
  iResultCode: Integer;
  sUnInstallString: string;
begin
  Result := True; { in case when no previous version is found }
  if RegValueExists(HKEY_LOCAL_MACHINE,'Software\Microsoft\Windows\CurrentVersion\Uninstall\{1ECC9EC9-CD71-45CB-BD5E-6126F41FA32A}_is1', 'UninstallString') then  { Your App GUID/ID }
  begin
    V := MsgBox(ExpandConstant('An old version of the app was detected!'+ #13#10 + 'Uninstall is required to proceed.' + #13#10 + #13#10 + 'Do you want to uninstall it?'), mbInformation, MB_YESNO); { Custom Message if App installed }
    if V = IDYES then
    begin
      sUnInstallString := GetUninstallString();
      sUnInstallString :=  RemoveQuotes(sUnInstallString);
      Exec(ExpandConstant(sUnInstallString), '/VERYSILENT /NORESTART /SUPPRESSMSGBOXES', '', SW_HIDE, ewWaitUntilTerminated, iResultCode);
      Result := True; { if you want to proceed after uninstall }
      { Exit; //if you want to quit after uninstall }
    end
    else
      Result := False; { when older version present and not uninstalled }
  end;
end;